package com.example.alertservice;

import android.content.Context;
import android.graphics.Color;
import android.graphics.YuvImage;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.location.LocationProvider;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;
import com.google.android.maps.GeoPoint;
import com.google.android.maps.MapActivity;
import com.google.android.maps.MapController;
import com.google.android.maps.MapView;
import com.google.android.maps.MapView.LayoutParams;


public class MainLocation extends MapActivity 
{
  MapView mapView;
  MapController mapCtrl;
  //위치정보를 공급하는 근원

  String locationProvider;
    //위치 정보 매니져 객체

    LocationManager locationManager;
    Location location;
    //정수 형태의 위도 경도 GeoPoint의 생성자로 전달할 값

    int latitude, longitude;
    
    TextView locationText;
    
    Button locationButton1;
    Button locationButton2;
    Button locationButton3;

    @Override

    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main_location);
        
    locationButton1 = (Button)findViewById(R.id.locationButton1);
        locationButton2 = (Button)findViewById(R.id.locationButton2);
        locationButton3 = (Button)findViewById(R.id.locationButton3);
        locationText = (TextView)findViewById(R.id.locationText);
        
       locationButton1.setOnClickListener(new View.OnClickListener() {			
			public void onClick(View v) {	
				 locationText.setText("지도");
				 locationButton1.setBackgroundColor(Color.GRAY);
				 locationButton2.setBackgroundColor(Color.BLACK);
				 locationButton3.setBackgroundColor(Color.BLACK);
				 mapView.setSatellite(false); //지도보기				
				 }
		});
        locationButton2.setOnClickListener(new View.OnClickListener() {			
			public void onClick(View v) {	
				locationText.setText("위성");
				 locationButton1.setBackgroundColor(Color.BLACK);
				 locationButton2.setBackgroundColor(Color.GRAY);
				 locationButton3.setBackgroundColor(Color.BLACK);
				mapView.setSatellite(true);  //위성보기			
			}
		});locationButton3.setOnClickListener(new View.OnClickListener() {			
			public void onClick(View v) {
				locationText.setText("내 위치");
				 locationButton1.setBackgroundColor(Color.BLACK);
				 locationButton2.setBackgroundColor(Color.BLACK);
				 locationButton3.setBackgroundColor(Color.GRAY);
				GeoPoint gPoint3=new GeoPoint(latitude, longitude);
			    mapCtrl.animateTo(gPoint3);//현재위치
			}
		});

        //MapView 객체의 참조값 얻어오기
        mapView=(MapView)findViewById(R.id.mapView);
        //줌기능
        mapView.setBuiltInZoomControls(true);
        //위도 경도를 입력하기 위한 객체 생성하기
        GeoPoint gPoint=new GeoPoint((int)(37.566912*1E6), 126978517);
        //위치 설정으리 위한 컨트롤러 객체
        mapCtrl=mapView.getController();
        //지도가 현재 나타내고 있는 중심점을 GeoPoint 객체에 정의 된대로 설정
        mapCtrl.setCenter(gPoint);
        //지도의 배율
        mapCtrl.setZoom(16);     

        //위치 정보 매니져 객체 얻어오기
        locationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
        //위치정보 공급자 얻어오기 provider=null이라고 오류가 나오면 manifest에서 권한설정이 안되있는 것이다.
        //공급자는 GPS, Network 둘중에 1가지로 String으로 들어온다.

        locationProvider = locationManager.getBestProvider(new Criteria(), true);

        Toast.makeText(this, "위치정보 공급자:"+locationProvider, 0).show();
        //가장 최근의 Location 객체 얻어오기
        Location location = locationManager.getLastKnownLocation(locationProvider);
        

        if(location != null ){

         //실수로 얻어지는 위도 경도값을 GeoPoint 객체에 생성자로 전달할 수 있는 형태로 변환
         latitude = (int)(location.getLatitude()*1000000);
         longitude = (int)(location.getLongitude()*1000000);
        }
    }
    
    @Override
    protected void onResume() {
     super.onResume();
     locationManager.requestLocationUpdates(locationProvider, 5000, 10, listener);//5초, 10미터 마다     

    }

    @Override
    protected void onPause() {
         super.onPause();
         locationManager.removeUpdates(listener);
    }   

    //locationListener객체 만들기
    LocationListener listener = new LocationListener() {
   //상태가 바뀌었을 때

   public void onStatusChanged(String provider, int status, Bundle extras) {
    String msg = "";
    switch(status){
    case LocationProvider.OUT_OF_SERVICE :
     Toast.makeText(MainLocation.this, "위치 정보를 이용할 수 없습니다.", 0).show();
     break;
    case LocationProvider.TEMPORARILY_UNAVAILABLE :
     Toast.makeText(MainLocation.this, "일시적으로 이용을 할 수 없습니다.", 0).show();
     break;
    case LocationProvider.AVAILABLE :
     Toast.makeText(MainLocation.this, "위치 정보가 이용 가능합니다.", 0).show();
     break;
    }

   }
   //공급자가 공급 가능하게 되었을 때
   public void onProviderEnabled(String provider) {
    Toast.makeText(MainLocation.this, "위치 정보가 이용 가능합니다.", 0).show();
   }  
   //공급자가 공급 못하게 되었을 때
   public void onProviderDisabled(String provider) {
    Toast.makeText(MainLocation.this, "위치 정보를 이용할 수 없습니다.", 0).show();
   }
   //위치 정보가 바뀌엇을때 호출되는 메소드
   public void onLocationChanged(Location location) {
    //기존의 현재위치 지우기
    mapView.removeAllViews();   
    //업데이트 된 위치정보 입력받기
    latitude = (int)(location.getLatitude()*1000000);
         longitude = (int)(location.getLongitude()*1000000);
         GeoPoint gPoint3=new GeoPoint(latitude, longitude);

      //맵뷰에 이미지를 출력해보기
    //ImageView 객체 생성
    ImageView image2=new ImageView(MainLocation.this);
    image2.setImageResource(R.drawable.ic_launcher);
    //맵뷰에 이미지 배치에 대한 정보를 갖는 LayoutParams 객체 생성하기
    MapView.LayoutParams lp=new MapView.LayoutParams
      (LayoutParams.WRAP_CONTENT,  // 차지할 폭
      LayoutParams.WRAP_CONTENT,   // 차지할 높이
      gPoint3, //이미지를 나타낼 위치
      MapView.LayoutParams.CENTER); //중앙에 정렬
    //맵뷰에 이미지 출력하기
    mapView.addView(image2, lp);

    //좌상단에 문자열 배치하기
    TextView text=new TextView(MainLocation.this);
    text.setText("현재위치");
    text.setTextSize(30);
    text.setTextColor(Color.RED);
    //문자열을 배치하기 위한 레이아웃파람 객체생성
    MapView.LayoutParams lp2=new MapView.LayoutParams
      (LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT,  gPoint3, //위치
      MapView.LayoutParams.LEFT | MapView.LayoutParams.TOP);
    //TextView 객체 배치하기
    mapView.addView(text, lp2);
    mapCtrl.animateTo(gPoint3);    
    }
  }; 
 /* //옵션 메뉴 만들기
  @Override
  public boolean onCreateOptionsMenu(Menu menu) {
   menu.add(0,1,0,"지도");
   menu.add(0,2,0,"위성");
   menu.add(0,3,0,"현재위치");
   return true;
  }
  //옵션메뉴가 선택되었을때 실행되는 메소드
  @Override
  public boolean onOptionsItemSelected(MenuItem item) {
   //선택한 옵션 메뉴 아이디를 읽어와서 다른 동작을 하게 한다.
   switch(item.getItemId()){
   case 1: 
    mapView.setSatellite(false); //지도보기
    break;
   case 2:
    mapView.setSatellite(true);  //위성보기
    break;  
   case 3:
	   GeoPoint gPoint3=new GeoPoint(latitude, longitude);

    //wlehfmf 현재 위치에 표시

    mapCtrl.animateTo(gPoint3);




    break;
   }
   return true;
  }*/
  //추상 메소드 오버라이딩 
  @Override
  protected boolean isRouteDisplayed() {
	  return false;
  }
  
}




